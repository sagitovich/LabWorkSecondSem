Лабораторная работа №8
«Стек»

Стек – это структура данных, в которую вы можете добавлять данные в прямом порядке, а извлекать уже в обратном. 
Так называемый принцип LIFO = Last In First Out.
Не путайте стек – структуру данных и стек – область память, хотя работают они по схожему принципу 

Вашей задачей будет создать шаблонный класс для реализации стека. В нем нужно предусмотреть методы:
1.	Конструктор с указанием размера стека
2.	Метод size
3.	Метод empty – возвращает true или false
4.	Метод push, чтобы положить в элемент в стек
5.	Метод pop, чтобы извлечь элемент из стека
6.	Метод top, чтобы посмотреть верхний элемент стека, но не извлекать его.
7.  Метод print – возвращающий максимальное кол-во элементов.
8.  Метод Info, для компактного получения информации о состоянии стека

Добавьте обработку некорректных ситуаций через исключения:
1.	Невозможно выделить необходимый участок памяти под стек (std::bad_alloc).
2.	Невозможно добавить новый элемент в стек (например, std::overflow_error)
3.	Невозможно извлечь элемент из стека, так как стек пустой (например, std::out_of_range)
4.	Невозможно посмотреть элемент на вершине стека, так как стек пустой (например, std::logic_error).

https://www.bestprog.net/ru/2019/10/11/c-development-of-a-template-class-that-implements-a-stack-in-the-form-of-a-linked-list-ru/

Продемонстрируйте работу вашего стека (Здесь на примере int). +
Создайте стек на 10 элементов.                                +
Заполните его рандомным кол-вом(1-8) рандомных чисел (1-100) и покажите их. +
Представьте информацию о состоянии стека методом Info. Пример:          +
«Стек заполнен на 50%, он хранит 6 эл. из 12, Верхний элемент = 11»     +
Заполните стек до конца нулями.                                         +
Добавьте в стек еще один элемент [ИСКЛ].                                + 
Выгрузите из стека все элементы и покажите их. (Не циклом for!)         +
Выгрузите верхний элемент [ИСКЛ].                                       +
Покажите верхний элемент [ИСКЛ].                                        +
Создайте стек на (-5) элементов [ИСКЛ].                                 -

ОБРАБОТКА ИСКЛЮЧЕНИЙ ВНУТРИ КЛАССА 

Для упрощения в классе можно хранить 3 информационных поля.


Stack (int Size) 
// {
//     m_Size = Size;
//     try 
//     {
//         if (m_Size <= 0)
//         {
//             throw std::bad_alloc(); //("Невозможно выделить необходимый участок памяти под стек.");
//         }
//         int *m_Array = new int[m_Size];
        
//     }
//     catch (const std::bad_alloc& ErrorMessage)
//     {
//         std::cout << ErrorMessage.what() << '\n';
//     }
// }